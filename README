Simple Banking System with Exception Handling

Create a Java program that simulates a simple banking system, allowing users to deposit, withdraw, and check their account balance while handling various exceptions.

Requirements:

    1. Create a BankAccount class with the following attributes:
        a. accountNumber (a unique integer)
        b. balance (double) representing the account balance
        c. Implement methods in the BankAccount class for deposit, withdrawal, and checking the balance while handling exceptions such as insufficient funds, invalid input, and custom exceptions.

    2. Create a custom exception called InsufficientFundsException that is thrown when a withdrawal is attempted with insufficient funds.

    3. Develop a BankingApp class to interact with users.
        a. Allow users to deposit, withdraw, and check balance, and handle exceptions by providing helpful error messages.
        b. Implement a menu-driven user interface for the banking app, allowing users to perform operations repeatedly until they choose to exit.
        c. Use try-catch blocks to handle exceptions and provide detailed error messages.

    4. Implement input validation to ensure that user input is in the correct format (eg, no negative deposits or withdrawals, valid account numbers).

    5. Add support for multiple accounts (eg, using a ArrayList of BankAccount objects) and allow users to select an account by entering an account number.

    6. Implement a feature to save account data to a file (eg, using serialization or text files) so that account information is retained between program runs.

During the program:
    • Make use of encapsulation, creating meaningful custom exceptions, and modular code design.

    • Ensure you test your program with various inputs to verify the correctness of exception handling.
    ===================================================================================================
    Bank Account Management with Linked List

    Using the bank account and exception classes from last week’s practical, create a Java program for managing a list of bank accounts using a custom linked list. The program should allow you to add bank accounts, deposit funds, withdraw funds (with exception handling), display account details, and implement basic list operations.

    You will need to:

        1. Ensure the BankAccount class is implemented.

        2. Create a custom linked list for managing bank accounts by:

            a. Creating a Node class
            b. Creating a LinkedList class

        3. Create a menu-driven program (BankAccountManagement) that allows you to perform the following actions:

            a. Add a new bank account
            b. Deposit funds into both the new and existing accounts
            c. Withdraw funds from an account (handling InsufficientFundsException)
            d. Display account details for all accounts
            e. Implement basic linked list operations such as adding, removing, and searching for accounts

        4. Ensure that the program handles exceptions, such as invalid inputs and the InsufficientFundsException when withdrawing




    Suggestions for Discussion:

        • Discuss the benefits of using a custom linked list to manage bank accounts
        • Discuss the advantages of linked lists in dynamically managing bank accounts
        • Extend the program with additional features or improvements


    • Use try-catch blocks, custom exceptions, and good error messages to make the program user-friendly and robust.